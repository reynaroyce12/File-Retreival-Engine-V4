// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/file_retrieval_engine.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2ffile_5fretrieval_5fengine_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2ffile_5fretrieval_5fengine_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2ffile_5fretrieval_5fengine_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2ffile_5fretrieval_5fengine_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2ffile_5fretrieval_5fengine_2eproto;
namespace fre {
class IndexRep;
struct IndexRepDefaultTypeInternal;
extern IndexRepDefaultTypeInternal _IndexRep_default_instance_;
class IndexReq;
struct IndexReqDefaultTypeInternal;
extern IndexReqDefaultTypeInternal _IndexReq_default_instance_;
class IndexReq_WordFrequenciesEntry_DoNotUse;
struct IndexReq_WordFrequenciesEntry_DoNotUseDefaultTypeInternal;
extern IndexReq_WordFrequenciesEntry_DoNotUseDefaultTypeInternal _IndexReq_WordFrequenciesEntry_DoNotUse_default_instance_;
class SearchRep;
struct SearchRepDefaultTypeInternal;
extern SearchRepDefaultTypeInternal _SearchRep_default_instance_;
class SearchRep_SearchResultsEntry_DoNotUse;
struct SearchRep_SearchResultsEntry_DoNotUseDefaultTypeInternal;
extern SearchRep_SearchResultsEntry_DoNotUseDefaultTypeInternal _SearchRep_SearchResultsEntry_DoNotUse_default_instance_;
class SearchReq;
struct SearchReqDefaultTypeInternal;
extern SearchReqDefaultTypeInternal _SearchReq_default_instance_;
}  // namespace fre
PROTOBUF_NAMESPACE_OPEN
template<> ::fre::IndexRep* Arena::CreateMaybeMessage<::fre::IndexRep>(Arena*);
template<> ::fre::IndexReq* Arena::CreateMaybeMessage<::fre::IndexReq>(Arena*);
template<> ::fre::IndexReq_WordFrequenciesEntry_DoNotUse* Arena::CreateMaybeMessage<::fre::IndexReq_WordFrequenciesEntry_DoNotUse>(Arena*);
template<> ::fre::SearchRep* Arena::CreateMaybeMessage<::fre::SearchRep>(Arena*);
template<> ::fre::SearchRep_SearchResultsEntry_DoNotUse* Arena::CreateMaybeMessage<::fre::SearchRep_SearchResultsEntry_DoNotUse>(Arena*);
template<> ::fre::SearchReq* Arena::CreateMaybeMessage<::fre::SearchReq>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace fre {

// ===================================================================

class IndexReq_WordFrequenciesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<IndexReq_WordFrequenciesEntry_DoNotUse, 
    std::string, int64_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<IndexReq_WordFrequenciesEntry_DoNotUse, 
    std::string, int64_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64> SuperType;
  IndexReq_WordFrequenciesEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR IndexReq_WordFrequenciesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit IndexReq_WordFrequenciesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const IndexReq_WordFrequenciesEntry_DoNotUse& other);
  static const IndexReq_WordFrequenciesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const IndexReq_WordFrequenciesEntry_DoNotUse*>(&_IndexReq_WordFrequenciesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "fre.IndexReq.WordFrequenciesEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_proto_2ffile_5fretrieval_5fengine_2eproto;
};

// -------------------------------------------------------------------

class IndexReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fre.IndexReq) */ {
 public:
  inline IndexReq() : IndexReq(nullptr) {}
  ~IndexReq() override;
  explicit PROTOBUF_CONSTEXPR IndexReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IndexReq(const IndexReq& from);
  IndexReq(IndexReq&& from) noexcept
    : IndexReq() {
    *this = ::std::move(from);
  }

  inline IndexReq& operator=(const IndexReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline IndexReq& operator=(IndexReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IndexReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const IndexReq* internal_default_instance() {
    return reinterpret_cast<const IndexReq*>(
               &_IndexReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(IndexReq& a, IndexReq& b) {
    a.Swap(&b);
  }
  inline void Swap(IndexReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IndexReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IndexReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IndexReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IndexReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const IndexReq& from) {
    IndexReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IndexReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fre.IndexReq";
  }
  protected:
  explicit IndexReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kWordFrequenciesFieldNumber = 3,
    kClientIdFieldNumber = 1,
    kDocumentPathFieldNumber = 2,
  };
  // map<string, int64> word_frequencies = 3;
  int word_frequencies_size() const;
  private:
  int _internal_word_frequencies_size() const;
  public:
  void clear_word_frequencies();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >&
      _internal_word_frequencies() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >*
      _internal_mutable_word_frequencies();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >&
      word_frequencies() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >*
      mutable_word_frequencies();

  // string client_id = 1;
  void clear_client_id();
  const std::string& client_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_client_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_client_id();
  PROTOBUF_NODISCARD std::string* release_client_id();
  void set_allocated_client_id(std::string* client_id);
  private:
  const std::string& _internal_client_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_client_id(const std::string& value);
  std::string* _internal_mutable_client_id();
  public:

  // string document_path = 2;
  void clear_document_path();
  const std::string& document_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_document_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_document_path();
  PROTOBUF_NODISCARD std::string* release_document_path();
  void set_allocated_document_path(std::string* document_path);
  private:
  const std::string& _internal_document_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_document_path(const std::string& value);
  std::string* _internal_mutable_document_path();
  public:

  // @@protoc_insertion_point(class_scope:fre.IndexReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        IndexReq_WordFrequenciesEntry_DoNotUse,
        std::string, int64_t,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64> word_frequencies_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr document_path_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2ffile_5fretrieval_5fengine_2eproto;
};
// -------------------------------------------------------------------

class IndexRep final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fre.IndexRep) */ {
 public:
  inline IndexRep() : IndexRep(nullptr) {}
  ~IndexRep() override;
  explicit PROTOBUF_CONSTEXPR IndexRep(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IndexRep(const IndexRep& from);
  IndexRep(IndexRep&& from) noexcept
    : IndexRep() {
    *this = ::std::move(from);
  }

  inline IndexRep& operator=(const IndexRep& from) {
    CopyFrom(from);
    return *this;
  }
  inline IndexRep& operator=(IndexRep&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IndexRep& default_instance() {
    return *internal_default_instance();
  }
  static inline const IndexRep* internal_default_instance() {
    return reinterpret_cast<const IndexRep*>(
               &_IndexRep_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(IndexRep& a, IndexRep& b) {
    a.Swap(&b);
  }
  inline void Swap(IndexRep* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IndexRep* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IndexRep* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IndexRep>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IndexRep& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const IndexRep& from) {
    IndexRep::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IndexRep* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fre.IndexRep";
  }
  protected:
  explicit IndexRep(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAckFieldNumber = 1,
  };
  // string ack = 1;
  void clear_ack();
  const std::string& ack() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ack(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ack();
  PROTOBUF_NODISCARD std::string* release_ack();
  void set_allocated_ack(std::string* ack);
  private:
  const std::string& _internal_ack() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ack(const std::string& value);
  std::string* _internal_mutable_ack();
  public:

  // @@protoc_insertion_point(class_scope:fre.IndexRep)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ack_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2ffile_5fretrieval_5fengine_2eproto;
};
// -------------------------------------------------------------------

class SearchReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fre.SearchReq) */ {
 public:
  inline SearchReq() : SearchReq(nullptr) {}
  ~SearchReq() override;
  explicit PROTOBUF_CONSTEXPR SearchReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SearchReq(const SearchReq& from);
  SearchReq(SearchReq&& from) noexcept
    : SearchReq() {
    *this = ::std::move(from);
  }

  inline SearchReq& operator=(const SearchReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchReq& operator=(SearchReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SearchReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const SearchReq* internal_default_instance() {
    return reinterpret_cast<const SearchReq*>(
               &_SearchReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SearchReq& a, SearchReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SearchReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SearchReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SearchReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SearchReq& from) {
    SearchReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fre.SearchReq";
  }
  protected:
  explicit SearchReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTermsFieldNumber = 1,
  };
  // repeated string terms = 1;
  int terms_size() const;
  private:
  int _internal_terms_size() const;
  public:
  void clear_terms();
  const std::string& terms(int index) const;
  std::string* mutable_terms(int index);
  void set_terms(int index, const std::string& value);
  void set_terms(int index, std::string&& value);
  void set_terms(int index, const char* value);
  void set_terms(int index, const char* value, size_t size);
  std::string* add_terms();
  void add_terms(const std::string& value);
  void add_terms(std::string&& value);
  void add_terms(const char* value);
  void add_terms(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& terms() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_terms();
  private:
  const std::string& _internal_terms(int index) const;
  std::string* _internal_add_terms();
  public:

  // @@protoc_insertion_point(class_scope:fre.SearchReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> terms_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2ffile_5fretrieval_5fengine_2eproto;
};
// -------------------------------------------------------------------

class SearchRep_SearchResultsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SearchRep_SearchResultsEntry_DoNotUse, 
    std::string, int64_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SearchRep_SearchResultsEntry_DoNotUse, 
    std::string, int64_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64> SuperType;
  SearchRep_SearchResultsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR SearchRep_SearchResultsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit SearchRep_SearchResultsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const SearchRep_SearchResultsEntry_DoNotUse& other);
  static const SearchRep_SearchResultsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SearchRep_SearchResultsEntry_DoNotUse*>(&_SearchRep_SearchResultsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "fre.SearchRep.SearchResultsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_proto_2ffile_5fretrieval_5fengine_2eproto;
};

// -------------------------------------------------------------------

class SearchRep final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fre.SearchRep) */ {
 public:
  inline SearchRep() : SearchRep(nullptr) {}
  ~SearchRep() override;
  explicit PROTOBUF_CONSTEXPR SearchRep(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SearchRep(const SearchRep& from);
  SearchRep(SearchRep&& from) noexcept
    : SearchRep() {
    *this = ::std::move(from);
  }

  inline SearchRep& operator=(const SearchRep& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchRep& operator=(SearchRep&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SearchRep& default_instance() {
    return *internal_default_instance();
  }
  static inline const SearchRep* internal_default_instance() {
    return reinterpret_cast<const SearchRep*>(
               &_SearchRep_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SearchRep& a, SearchRep& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchRep* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchRep* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SearchRep* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SearchRep>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SearchRep& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SearchRep& from) {
    SearchRep::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchRep* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fre.SearchRep";
  }
  protected:
  explicit SearchRep(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kSearchResultsFieldNumber = 1,
  };
  // map<string, int64> search_results = 1;
  int search_results_size() const;
  private:
  int _internal_search_results_size() const;
  public:
  void clear_search_results();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >&
      _internal_search_results() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >*
      _internal_mutable_search_results();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >&
      search_results() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >*
      mutable_search_results();

  // @@protoc_insertion_point(class_scope:fre.SearchRep)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        SearchRep_SearchResultsEntry_DoNotUse,
        std::string, int64_t,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64> search_results_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2ffile_5fretrieval_5fengine_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// IndexReq

// string client_id = 1;
inline void IndexReq::clear_client_id() {
  _impl_.client_id_.ClearToEmpty();
}
inline const std::string& IndexReq::client_id() const {
  // @@protoc_insertion_point(field_get:fre.IndexReq.client_id)
  return _internal_client_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IndexReq::set_client_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.client_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:fre.IndexReq.client_id)
}
inline std::string* IndexReq::mutable_client_id() {
  std::string* _s = _internal_mutable_client_id();
  // @@protoc_insertion_point(field_mutable:fre.IndexReq.client_id)
  return _s;
}
inline const std::string& IndexReq::_internal_client_id() const {
  return _impl_.client_id_.Get();
}
inline void IndexReq::_internal_set_client_id(const std::string& value) {
  
  _impl_.client_id_.Set(value, GetArenaForAllocation());
}
inline std::string* IndexReq::_internal_mutable_client_id() {
  
  return _impl_.client_id_.Mutable(GetArenaForAllocation());
}
inline std::string* IndexReq::release_client_id() {
  // @@protoc_insertion_point(field_release:fre.IndexReq.client_id)
  return _impl_.client_id_.Release();
}
inline void IndexReq::set_allocated_client_id(std::string* client_id) {
  if (client_id != nullptr) {
    
  } else {
    
  }
  _impl_.client_id_.SetAllocated(client_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.client_id_.IsDefault()) {
    _impl_.client_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fre.IndexReq.client_id)
}

// string document_path = 2;
inline void IndexReq::clear_document_path() {
  _impl_.document_path_.ClearToEmpty();
}
inline const std::string& IndexReq::document_path() const {
  // @@protoc_insertion_point(field_get:fre.IndexReq.document_path)
  return _internal_document_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IndexReq::set_document_path(ArgT0&& arg0, ArgT... args) {
 
 _impl_.document_path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:fre.IndexReq.document_path)
}
inline std::string* IndexReq::mutable_document_path() {
  std::string* _s = _internal_mutable_document_path();
  // @@protoc_insertion_point(field_mutable:fre.IndexReq.document_path)
  return _s;
}
inline const std::string& IndexReq::_internal_document_path() const {
  return _impl_.document_path_.Get();
}
inline void IndexReq::_internal_set_document_path(const std::string& value) {
  
  _impl_.document_path_.Set(value, GetArenaForAllocation());
}
inline std::string* IndexReq::_internal_mutable_document_path() {
  
  return _impl_.document_path_.Mutable(GetArenaForAllocation());
}
inline std::string* IndexReq::release_document_path() {
  // @@protoc_insertion_point(field_release:fre.IndexReq.document_path)
  return _impl_.document_path_.Release();
}
inline void IndexReq::set_allocated_document_path(std::string* document_path) {
  if (document_path != nullptr) {
    
  } else {
    
  }
  _impl_.document_path_.SetAllocated(document_path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.document_path_.IsDefault()) {
    _impl_.document_path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fre.IndexReq.document_path)
}

// map<string, int64> word_frequencies = 3;
inline int IndexReq::_internal_word_frequencies_size() const {
  return _impl_.word_frequencies_.size();
}
inline int IndexReq::word_frequencies_size() const {
  return _internal_word_frequencies_size();
}
inline void IndexReq::clear_word_frequencies() {
  _impl_.word_frequencies_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >&
IndexReq::_internal_word_frequencies() const {
  return _impl_.word_frequencies_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >&
IndexReq::word_frequencies() const {
  // @@protoc_insertion_point(field_map:fre.IndexReq.word_frequencies)
  return _internal_word_frequencies();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >*
IndexReq::_internal_mutable_word_frequencies() {
  return _impl_.word_frequencies_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >*
IndexReq::mutable_word_frequencies() {
  // @@protoc_insertion_point(field_mutable_map:fre.IndexReq.word_frequencies)
  return _internal_mutable_word_frequencies();
}

// -------------------------------------------------------------------

// IndexRep

// string ack = 1;
inline void IndexRep::clear_ack() {
  _impl_.ack_.ClearToEmpty();
}
inline const std::string& IndexRep::ack() const {
  // @@protoc_insertion_point(field_get:fre.IndexRep.ack)
  return _internal_ack();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IndexRep::set_ack(ArgT0&& arg0, ArgT... args) {
 
 _impl_.ack_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:fre.IndexRep.ack)
}
inline std::string* IndexRep::mutable_ack() {
  std::string* _s = _internal_mutable_ack();
  // @@protoc_insertion_point(field_mutable:fre.IndexRep.ack)
  return _s;
}
inline const std::string& IndexRep::_internal_ack() const {
  return _impl_.ack_.Get();
}
inline void IndexRep::_internal_set_ack(const std::string& value) {
  
  _impl_.ack_.Set(value, GetArenaForAllocation());
}
inline std::string* IndexRep::_internal_mutable_ack() {
  
  return _impl_.ack_.Mutable(GetArenaForAllocation());
}
inline std::string* IndexRep::release_ack() {
  // @@protoc_insertion_point(field_release:fre.IndexRep.ack)
  return _impl_.ack_.Release();
}
inline void IndexRep::set_allocated_ack(std::string* ack) {
  if (ack != nullptr) {
    
  } else {
    
  }
  _impl_.ack_.SetAllocated(ack, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ack_.IsDefault()) {
    _impl_.ack_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fre.IndexRep.ack)
}

// -------------------------------------------------------------------

// SearchReq

// repeated string terms = 1;
inline int SearchReq::_internal_terms_size() const {
  return _impl_.terms_.size();
}
inline int SearchReq::terms_size() const {
  return _internal_terms_size();
}
inline void SearchReq::clear_terms() {
  _impl_.terms_.Clear();
}
inline std::string* SearchReq::add_terms() {
  std::string* _s = _internal_add_terms();
  // @@protoc_insertion_point(field_add_mutable:fre.SearchReq.terms)
  return _s;
}
inline const std::string& SearchReq::_internal_terms(int index) const {
  return _impl_.terms_.Get(index);
}
inline const std::string& SearchReq::terms(int index) const {
  // @@protoc_insertion_point(field_get:fre.SearchReq.terms)
  return _internal_terms(index);
}
inline std::string* SearchReq::mutable_terms(int index) {
  // @@protoc_insertion_point(field_mutable:fre.SearchReq.terms)
  return _impl_.terms_.Mutable(index);
}
inline void SearchReq::set_terms(int index, const std::string& value) {
  _impl_.terms_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:fre.SearchReq.terms)
}
inline void SearchReq::set_terms(int index, std::string&& value) {
  _impl_.terms_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:fre.SearchReq.terms)
}
inline void SearchReq::set_terms(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.terms_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:fre.SearchReq.terms)
}
inline void SearchReq::set_terms(int index, const char* value, size_t size) {
  _impl_.terms_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:fre.SearchReq.terms)
}
inline std::string* SearchReq::_internal_add_terms() {
  return _impl_.terms_.Add();
}
inline void SearchReq::add_terms(const std::string& value) {
  _impl_.terms_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:fre.SearchReq.terms)
}
inline void SearchReq::add_terms(std::string&& value) {
  _impl_.terms_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:fre.SearchReq.terms)
}
inline void SearchReq::add_terms(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.terms_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:fre.SearchReq.terms)
}
inline void SearchReq::add_terms(const char* value, size_t size) {
  _impl_.terms_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:fre.SearchReq.terms)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SearchReq::terms() const {
  // @@protoc_insertion_point(field_list:fre.SearchReq.terms)
  return _impl_.terms_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SearchReq::mutable_terms() {
  // @@protoc_insertion_point(field_mutable_list:fre.SearchReq.terms)
  return &_impl_.terms_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// SearchRep

// map<string, int64> search_results = 1;
inline int SearchRep::_internal_search_results_size() const {
  return _impl_.search_results_.size();
}
inline int SearchRep::search_results_size() const {
  return _internal_search_results_size();
}
inline void SearchRep::clear_search_results() {
  _impl_.search_results_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >&
SearchRep::_internal_search_results() const {
  return _impl_.search_results_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >&
SearchRep::search_results() const {
  // @@protoc_insertion_point(field_map:fre.SearchRep.search_results)
  return _internal_search_results();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >*
SearchRep::_internal_mutable_search_results() {
  return _impl_.search_results_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >*
SearchRep::mutable_search_results() {
  // @@protoc_insertion_point(field_mutable_map:fre.SearchRep.search_results)
  return _internal_mutable_search_results();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace fre

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2ffile_5fretrieval_5fengine_2eproto
