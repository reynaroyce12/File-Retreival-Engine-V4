// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/file_retrieval_engine.proto

#include "proto/file_retrieval_engine.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace fre {
PROTOBUF_CONSTEXPR IndexReq_WordFrequenciesEntry_DoNotUse::IndexReq_WordFrequenciesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct IndexReq_WordFrequenciesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IndexReq_WordFrequenciesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IndexReq_WordFrequenciesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    IndexReq_WordFrequenciesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IndexReq_WordFrequenciesEntry_DoNotUseDefaultTypeInternal _IndexReq_WordFrequenciesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR IndexReq::IndexReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.word_frequencies_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.client_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.document_path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IndexReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IndexReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IndexReqDefaultTypeInternal() {}
  union {
    IndexReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IndexReqDefaultTypeInternal _IndexReq_default_instance_;
PROTOBUF_CONSTEXPR IndexRep::IndexRep(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ack_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IndexRepDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IndexRepDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IndexRepDefaultTypeInternal() {}
  union {
    IndexRep _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IndexRepDefaultTypeInternal _IndexRep_default_instance_;
PROTOBUF_CONSTEXPR SearchReq::SearchReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.terms_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SearchReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SearchReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SearchReqDefaultTypeInternal() {}
  union {
    SearchReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SearchReqDefaultTypeInternal _SearchReq_default_instance_;
PROTOBUF_CONSTEXPR SearchRep_SearchResultsEntry_DoNotUse::SearchRep_SearchResultsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct SearchRep_SearchResultsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SearchRep_SearchResultsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SearchRep_SearchResultsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    SearchRep_SearchResultsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SearchRep_SearchResultsEntry_DoNotUseDefaultTypeInternal _SearchRep_SearchResultsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR SearchRep::SearchRep(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.search_results_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SearchRepDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SearchRepDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SearchRepDefaultTypeInternal() {}
  union {
    SearchRep _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SearchRepDefaultTypeInternal _SearchRep_default_instance_;
}  // namespace fre
static ::_pb::Metadata file_level_metadata_proto_2ffile_5fretrieval_5fengine_2eproto[6];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_proto_2ffile_5fretrieval_5fengine_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_proto_2ffile_5fretrieval_5fengine_2eproto = nullptr;

const uint32_t TableStruct_proto_2ffile_5fretrieval_5fengine_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::fre::IndexReq_WordFrequenciesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fre::IndexReq_WordFrequenciesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::fre::IndexReq_WordFrequenciesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::fre::IndexReq_WordFrequenciesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fre::IndexReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::fre::IndexReq, _impl_.client_id_),
  PROTOBUF_FIELD_OFFSET(::fre::IndexReq, _impl_.document_path_),
  PROTOBUF_FIELD_OFFSET(::fre::IndexReq, _impl_.word_frequencies_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fre::IndexRep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::fre::IndexRep, _impl_.ack_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fre::SearchReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::fre::SearchReq, _impl_.terms_),
  PROTOBUF_FIELD_OFFSET(::fre::SearchRep_SearchResultsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fre::SearchRep_SearchResultsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::fre::SearchRep_SearchResultsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::fre::SearchRep_SearchResultsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fre::SearchRep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::fre::SearchRep, _impl_.search_results_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::fre::IndexReq_WordFrequenciesEntry_DoNotUse)},
  { 10, -1, -1, sizeof(::fre::IndexReq)},
  { 19, -1, -1, sizeof(::fre::IndexRep)},
  { 26, -1, -1, sizeof(::fre::SearchReq)},
  { 33, 41, -1, sizeof(::fre::SearchRep_SearchResultsEntry_DoNotUse)},
  { 43, -1, -1, sizeof(::fre::SearchRep)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::fre::_IndexReq_WordFrequenciesEntry_DoNotUse_default_instance_._instance,
  &::fre::_IndexReq_default_instance_._instance,
  &::fre::_IndexRep_default_instance_._instance,
  &::fre::_SearchReq_default_instance_._instance,
  &::fre::_SearchRep_SearchResultsEntry_DoNotUse_default_instance_._instance,
  &::fre::_SearchRep_default_instance_._instance,
};

const char descriptor_table_protodef_proto_2ffile_5fretrieval_5fengine_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n!proto/file_retrieval_engine.proto\022\003fre"
  "\032\033google/protobuf/empty.proto\"\252\001\n\010IndexR"
  "eq\022\021\n\tclient_id\030\001 \001(\t\022\025\n\rdocument_path\030\002"
  " \001(\t\022<\n\020word_frequencies\030\003 \003(\0132\".fre.Ind"
  "exReq.WordFrequenciesEntry\0326\n\024WordFreque"
  "nciesEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\003:\002"
  "8\001\"\027\n\010IndexRep\022\013\n\003ack\030\001 \001(\t\"\032\n\tSearchReq"
  "\022\r\n\005terms\030\001 \003(\t\"|\n\tSearchRep\0229\n\016search_r"
  "esults\030\001 \003(\0132!.fre.SearchRep.SearchResul"
  "tsEntry\0324\n\022SearchResultsEntry\022\013\n\003key\030\001 \001"
  "(\t\022\r\n\005value\030\002 \001(\003:\0028\0012x\n\023FileRetrievalEn"
  "gine\022.\n\014ComputeIndex\022\r.fre.IndexReq\032\r.fr"
  "e.IndexRep\"\000\0221\n\rComputeSearch\022\016.fre.Sear"
  "chReq\032\016.fre.SearchRep\"\000b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_proto_2ffile_5fretrieval_5fengine_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
};
static ::_pbi::once_flag descriptor_table_proto_2ffile_5fretrieval_5fengine_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_proto_2ffile_5fretrieval_5fengine_2eproto = {
    false, false, 551, descriptor_table_protodef_proto_2ffile_5fretrieval_5fengine_2eproto,
    "proto/file_retrieval_engine.proto",
    &descriptor_table_proto_2ffile_5fretrieval_5fengine_2eproto_once, descriptor_table_proto_2ffile_5fretrieval_5fengine_2eproto_deps, 1, 6,
    schemas, file_default_instances, TableStruct_proto_2ffile_5fretrieval_5fengine_2eproto::offsets,
    file_level_metadata_proto_2ffile_5fretrieval_5fengine_2eproto, file_level_enum_descriptors_proto_2ffile_5fretrieval_5fengine_2eproto,
    file_level_service_descriptors_proto_2ffile_5fretrieval_5fengine_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_proto_2ffile_5fretrieval_5fengine_2eproto_getter() {
  return &descriptor_table_proto_2ffile_5fretrieval_5fengine_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_proto_2ffile_5fretrieval_5fengine_2eproto(&descriptor_table_proto_2ffile_5fretrieval_5fengine_2eproto);
namespace fre {

// ===================================================================

IndexReq_WordFrequenciesEntry_DoNotUse::IndexReq_WordFrequenciesEntry_DoNotUse() {}
IndexReq_WordFrequenciesEntry_DoNotUse::IndexReq_WordFrequenciesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void IndexReq_WordFrequenciesEntry_DoNotUse::MergeFrom(const IndexReq_WordFrequenciesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata IndexReq_WordFrequenciesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2ffile_5fretrieval_5fengine_2eproto_getter, &descriptor_table_proto_2ffile_5fretrieval_5fengine_2eproto_once,
      file_level_metadata_proto_2ffile_5fretrieval_5fengine_2eproto[0]);
}

// ===================================================================

class IndexReq::_Internal {
 public:
};

IndexReq::IndexReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &IndexReq::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:fre.IndexReq)
}
IndexReq::IndexReq(const IndexReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IndexReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.word_frequencies_)*/{}
    , decltype(_impl_.client_id_){}
    , decltype(_impl_.document_path_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.word_frequencies_.MergeFrom(from._impl_.word_frequencies_);
  _impl_.client_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.client_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_client_id().empty()) {
    _this->_impl_.client_id_.Set(from._internal_client_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.document_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.document_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_document_path().empty()) {
    _this->_impl_.document_path_.Set(from._internal_document_path(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:fre.IndexReq)
}

inline void IndexReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.word_frequencies_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.client_id_){}
    , decltype(_impl_.document_path_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.client_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.client_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.document_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.document_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IndexReq::~IndexReq() {
  // @@protoc_insertion_point(destructor:fre.IndexReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void IndexReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.word_frequencies_.Destruct();
  _impl_.word_frequencies_.~MapField();
  _impl_.client_id_.Destroy();
  _impl_.document_path_.Destroy();
}

void IndexReq::ArenaDtor(void* object) {
  IndexReq* _this = reinterpret_cast< IndexReq* >(object);
  _this->_impl_.word_frequencies_.Destruct();
}
void IndexReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IndexReq::Clear() {
// @@protoc_insertion_point(message_clear_start:fre.IndexReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.word_frequencies_.Clear();
  _impl_.client_id_.ClearToEmpty();
  _impl_.document_path_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IndexReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string client_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_client_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "fre.IndexReq.client_id"));
        } else
          goto handle_unusual;
        continue;
      // string document_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_document_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "fre.IndexReq.document_path"));
        } else
          goto handle_unusual;
        continue;
      // map<string, int64> word_frequencies = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.word_frequencies_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IndexReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fre.IndexReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string client_id = 1;
  if (!this->_internal_client_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_id().data(), static_cast<int>(this->_internal_client_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fre.IndexReq.client_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_client_id(), target);
  }

  // string document_path = 2;
  if (!this->_internal_document_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_document_path().data(), static_cast<int>(this->_internal_document_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fre.IndexReq.document_path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_document_path(), target);
  }

  // map<string, int64> word_frequencies = 3;
  if (!this->_internal_word_frequencies().empty()) {
    using MapType = ::_pb::Map<std::string, int64_t>;
    using WireHelper = IndexReq_WordFrequenciesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_word_frequencies();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "fre.IndexReq.WordFrequenciesEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fre.IndexReq)
  return target;
}

size_t IndexReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fre.IndexReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, int64> word_frequencies = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_word_frequencies_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >::const_iterator
      it = this->_internal_word_frequencies().begin();
      it != this->_internal_word_frequencies().end(); ++it) {
    total_size += IndexReq_WordFrequenciesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string client_id = 1;
  if (!this->_internal_client_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_id());
  }

  // string document_path = 2;
  if (!this->_internal_document_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_document_path());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IndexReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IndexReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IndexReq::GetClassData() const { return &_class_data_; }


void IndexReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IndexReq*>(&to_msg);
  auto& from = static_cast<const IndexReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:fre.IndexReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.word_frequencies_.MergeFrom(from._impl_.word_frequencies_);
  if (!from._internal_client_id().empty()) {
    _this->_internal_set_client_id(from._internal_client_id());
  }
  if (!from._internal_document_path().empty()) {
    _this->_internal_set_document_path(from._internal_document_path());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IndexReq::CopyFrom(const IndexReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fre.IndexReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexReq::IsInitialized() const {
  return true;
}

void IndexReq::InternalSwap(IndexReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.word_frequencies_.InternalSwap(&other->_impl_.word_frequencies_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.client_id_, lhs_arena,
      &other->_impl_.client_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.document_path_, lhs_arena,
      &other->_impl_.document_path_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata IndexReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2ffile_5fretrieval_5fengine_2eproto_getter, &descriptor_table_proto_2ffile_5fretrieval_5fengine_2eproto_once,
      file_level_metadata_proto_2ffile_5fretrieval_5fengine_2eproto[1]);
}

// ===================================================================

class IndexRep::_Internal {
 public:
};

IndexRep::IndexRep(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:fre.IndexRep)
}
IndexRep::IndexRep(const IndexRep& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IndexRep* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ack_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.ack_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ack_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ack().empty()) {
    _this->_impl_.ack_.Set(from._internal_ack(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:fre.IndexRep)
}

inline void IndexRep::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ack_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.ack_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ack_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IndexRep::~IndexRep() {
  // @@protoc_insertion_point(destructor:fre.IndexRep)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IndexRep::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ack_.Destroy();
}

void IndexRep::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IndexRep::Clear() {
// @@protoc_insertion_point(message_clear_start:fre.IndexRep)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ack_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IndexRep::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ack = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_ack();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "fre.IndexRep.ack"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IndexRep::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fre.IndexRep)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string ack = 1;
  if (!this->_internal_ack().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ack().data(), static_cast<int>(this->_internal_ack().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fre.IndexRep.ack");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ack(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fre.IndexRep)
  return target;
}

size_t IndexRep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fre.IndexRep)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ack = 1;
  if (!this->_internal_ack().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ack());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IndexRep::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IndexRep::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IndexRep::GetClassData() const { return &_class_data_; }


void IndexRep::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IndexRep*>(&to_msg);
  auto& from = static_cast<const IndexRep&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:fre.IndexRep)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ack().empty()) {
    _this->_internal_set_ack(from._internal_ack());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IndexRep::CopyFrom(const IndexRep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fre.IndexRep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexRep::IsInitialized() const {
  return true;
}

void IndexRep::InternalSwap(IndexRep* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ack_, lhs_arena,
      &other->_impl_.ack_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata IndexRep::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2ffile_5fretrieval_5fengine_2eproto_getter, &descriptor_table_proto_2ffile_5fretrieval_5fengine_2eproto_once,
      file_level_metadata_proto_2ffile_5fretrieval_5fengine_2eproto[2]);
}

// ===================================================================

class SearchReq::_Internal {
 public:
};

SearchReq::SearchReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:fre.SearchReq)
}
SearchReq::SearchReq(const SearchReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SearchReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.terms_){from._impl_.terms_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:fre.SearchReq)
}

inline void SearchReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.terms_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SearchReq::~SearchReq() {
  // @@protoc_insertion_point(destructor:fre.SearchReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SearchReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.terms_.~RepeatedPtrField();
}

void SearchReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SearchReq::Clear() {
// @@protoc_insertion_point(message_clear_start:fre.SearchReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.terms_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SearchReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string terms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_terms();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "fre.SearchReq.terms"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SearchReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fre.SearchReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string terms = 1;
  for (int i = 0, n = this->_internal_terms_size(); i < n; i++) {
    const auto& s = this->_internal_terms(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fre.SearchReq.terms");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fre.SearchReq)
  return target;
}

size_t SearchReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fre.SearchReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string terms = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.terms_.size());
  for (int i = 0, n = _impl_.terms_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.terms_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SearchReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SearchReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SearchReq::GetClassData() const { return &_class_data_; }


void SearchReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SearchReq*>(&to_msg);
  auto& from = static_cast<const SearchReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:fre.SearchReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.terms_.MergeFrom(from._impl_.terms_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SearchReq::CopyFrom(const SearchReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fre.SearchReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchReq::IsInitialized() const {
  return true;
}

void SearchReq::InternalSwap(SearchReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.terms_.InternalSwap(&other->_impl_.terms_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SearchReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2ffile_5fretrieval_5fengine_2eproto_getter, &descriptor_table_proto_2ffile_5fretrieval_5fengine_2eproto_once,
      file_level_metadata_proto_2ffile_5fretrieval_5fengine_2eproto[3]);
}

// ===================================================================

SearchRep_SearchResultsEntry_DoNotUse::SearchRep_SearchResultsEntry_DoNotUse() {}
SearchRep_SearchResultsEntry_DoNotUse::SearchRep_SearchResultsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SearchRep_SearchResultsEntry_DoNotUse::MergeFrom(const SearchRep_SearchResultsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SearchRep_SearchResultsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2ffile_5fretrieval_5fengine_2eproto_getter, &descriptor_table_proto_2ffile_5fretrieval_5fengine_2eproto_once,
      file_level_metadata_proto_2ffile_5fretrieval_5fengine_2eproto[4]);
}

// ===================================================================

class SearchRep::_Internal {
 public:
};

SearchRep::SearchRep(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &SearchRep::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:fre.SearchRep)
}
SearchRep::SearchRep(const SearchRep& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SearchRep* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.search_results_)*/{}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.search_results_.MergeFrom(from._impl_.search_results_);
  // @@protoc_insertion_point(copy_constructor:fre.SearchRep)
}

inline void SearchRep::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.search_results_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SearchRep::~SearchRep() {
  // @@protoc_insertion_point(destructor:fre.SearchRep)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void SearchRep::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.search_results_.Destruct();
  _impl_.search_results_.~MapField();
}

void SearchRep::ArenaDtor(void* object) {
  SearchRep* _this = reinterpret_cast< SearchRep* >(object);
  _this->_impl_.search_results_.Destruct();
}
void SearchRep::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SearchRep::Clear() {
// @@protoc_insertion_point(message_clear_start:fre.SearchRep)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.search_results_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SearchRep::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, int64> search_results = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.search_results_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SearchRep::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fre.SearchRep)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, int64> search_results = 1;
  if (!this->_internal_search_results().empty()) {
    using MapType = ::_pb::Map<std::string, int64_t>;
    using WireHelper = SearchRep_SearchResultsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_search_results();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "fre.SearchRep.SearchResultsEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fre.SearchRep)
  return target;
}

size_t SearchRep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fre.SearchRep)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, int64> search_results = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_search_results_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >::const_iterator
      it = this->_internal_search_results().begin();
      it != this->_internal_search_results().end(); ++it) {
    total_size += SearchRep_SearchResultsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SearchRep::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SearchRep::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SearchRep::GetClassData() const { return &_class_data_; }


void SearchRep::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SearchRep*>(&to_msg);
  auto& from = static_cast<const SearchRep&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:fre.SearchRep)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.search_results_.MergeFrom(from._impl_.search_results_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SearchRep::CopyFrom(const SearchRep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fre.SearchRep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchRep::IsInitialized() const {
  return true;
}

void SearchRep::InternalSwap(SearchRep* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.search_results_.InternalSwap(&other->_impl_.search_results_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SearchRep::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2ffile_5fretrieval_5fengine_2eproto_getter, &descriptor_table_proto_2ffile_5fretrieval_5fengine_2eproto_once,
      file_level_metadata_proto_2ffile_5fretrieval_5fengine_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace fre
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::fre::IndexReq_WordFrequenciesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::fre::IndexReq_WordFrequenciesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fre::IndexReq_WordFrequenciesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::fre::IndexReq*
Arena::CreateMaybeMessage< ::fre::IndexReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fre::IndexReq >(arena);
}
template<> PROTOBUF_NOINLINE ::fre::IndexRep*
Arena::CreateMaybeMessage< ::fre::IndexRep >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fre::IndexRep >(arena);
}
template<> PROTOBUF_NOINLINE ::fre::SearchReq*
Arena::CreateMaybeMessage< ::fre::SearchReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fre::SearchReq >(arena);
}
template<> PROTOBUF_NOINLINE ::fre::SearchRep_SearchResultsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::fre::SearchRep_SearchResultsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fre::SearchRep_SearchResultsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::fre::SearchRep*
Arena::CreateMaybeMessage< ::fre::SearchRep >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fre::SearchRep >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
